# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import("//build/go.gni")
import("//build/substitute_file.gni")
import("//build/symlink.gni")

install_dir = "$root_out_dir/install"

action("release_files") {
  script = "//build/write_release.py"

  if (is_stable_build) {
    branch = "stable"
  } else {
    branch = "edge"
  }

  inputs = [".git/logs/HEAD"]
  outputs = ["$target_out_dir/VERSION", "$target_out_dir/BRANCH"]
  args = ["--head-file", rebase_path(inputs[0], root_build_dir), "--branch", branch,
          "--out-version", rebase_path(outputs[0], root_build_dir),
          "--out-branch", rebase_path(outputs[1], root_build_dir)]
}

# XXX: So, since we need to be able to write out files into what appears to be the source tree,
# but we can't actually (since GN does multiple build dirs, which is a feature that I would
# like to keep), then we need to instead copy ALL THE GO SOURCES over into the build tree.
# govendor is symlinked because that would mostly just be annoying to copy.

# Life is fun.

symlink("vendor_symlink") {
  name = "$go_target_dir/vendor"
  value = rebase_path("//vendor", root_build_dir)
}

substitute_file("host_paths") {
  source = "internal/paths/host_paths.template.go"
  output = "$go_target_dir/internal/paths/host_paths.go"
  vars = substitute_config_vars
}

substitute_file("nsbox_profile") {
  source = "//misc/profile.d-nsbox.sh"
  vars = substitute_config_vars
}

copy("gofiles") {
  sources = [
    "go.mod",
    "go.sum",
    "cmd/nsbox/main.go",
    "cmd/nsboxd/main.go",
    "cmd/nsbox-host/main.go",
    "internal/container/container.go",
    "internal/container/info.go",
    "internal/create/create.go",
    "internal/daemon/direct.go",
    "internal/daemon/transient.go",
    "internal/integration/xdgdesktop.go",
    "internal/inventory/inventory.go",
    "internal/kill/kill.go",
    "internal/log/log.go",
    "internal/nspawn/builder.go",
    "internal/paths/paths.go",
    "internal/ptyservice/client.go",
    "internal/ptyservice/service.go",
    "internal/session/enter.go",
    "internal/session/setup.go",
    "internal/userdata/userdata.go",
    "internal/varlink/dev.nsbox.varlink",
    "internal/varlinkhost/varlinkhost.go",
    "internal/webutil/download.go",
    "internal/webutil/extract.go",
  ]

  outputs = ["$go_target_dir/{{source}}"]

  deps = [":vendor_symlink", ":host_paths"]
}

go_binary("varlink-go-interface-generator") {
  package = "github.com/varlink/go/cmd/varlink-go-interface-generator"
  deps = [":gofiles"]
}

action("nsbox-varlink-interface") {
  varlink_generator = rebase_path(get_target_outputs(":varlink-go-interface-generator"),
                                  go_target_dir)

  script = "//build/bin_proxy.py"
  args = [rebase_path(go_target_dir, root_build_dir), varlink_generator[0],
          "internal/varlink/dev.nsbox.varlink"]
  outputs = ["$go_target_dir/interface/varlink/devnsbox.go"]
  deps = [":gofiles", ":varlink-go-interface-generator"]
}

binaries = ["nsbox", "nsboxd", "nsbox-host"]

foreach(binary, binaries) {
  go_binary(binary) {
    package = "github.com/refi64/nsbox/cmd/$binary"
    deps = [":gofiles", ":nsbox-varlink-interface"]

    if (binary == "nsbox-host") {
      static = true
    }
  }
}

copy("install-bin") {
  sources = get_target_outputs(":nsbox")
  outputs = ["$install_dir/$bin_dir/{{source_file_part}}"]
  deps = [":nsbox"]
}

copy("install-etc") {
  sources = get_target_outputs(":nsbox_profile")
  outputs = ["$install_dir/$config_dir/profile.d/nsbox.sh"]
  deps = [":nsbox_profile"]
}

copy("install-private-exec") {
  sources = get_target_outputs(":nsboxd") + get_target_outputs(":nsbox-host")
  outputs = ["$install_dir/$libexec_dir/nsbox/{{source_file_part}}"]
  deps = [":nsboxd", ":nsbox-host"]
}

copy("install-share-data") {
  sources = [
    "data/getty-override.conf",
    "data/nsbox-container.target",
    "data/nsbox-init.service",
    "data/scripts/nsbox-apply-env.sh",
    "data/scripts/nsbox-enter-run.sh",
    "data/scripts/nsbox-enter-setup.sh",
    "data/scripts/nsbox-init.sh",
  ]
  outputs = ["$install_dir/$share_dir/nsbox/{{source}}"]
}

copy("install-share-release") {
  sources = get_target_outputs(":release_files")
  deps = [":release_files"]
  outputs = ["$install_dir/$share_dir/nsbox/release/{{source_file_part}}"]
}

group("nsbox-install-root") {
  deps = [
    ":install-bin",
    ":install-etc",
    ":install-private-exec",
    ":install-share-data",
    ":install-share-release",
  ]
}

if (fedora_guest_tools) {
  group("guest_tools") {
    deps = ["//guest-tools/fedora"]
  }
}
