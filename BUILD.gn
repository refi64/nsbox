# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import("//build/go.gni")
import("//build/python_binary.gni")
import("//build/substitute_file.gni")
import("//build/symlink.gni")

install_dir = "$root_out_dir/install"

pool("console") {
  depth = 1
}

action("release_files") {
  script = "//build/write_release.py"

  outputs = ["$root_out_dir/VERSION", "$root_out_dir/BRANCH"]
  args = ["--version", release_version, "--branch", release_branch,
          "--out-version", rebase_path(outputs[0], root_build_dir),
          "--out-branch", rebase_path(outputs[1], root_build_dir)]
}

# XXX: So, since we need to be able to write out files into what appears to be the source tree,
# but we can't actually (since GN does multiple build dirs, which is a feature that I would
# like to keep), then we need to instead copy ALL THE GO SOURCES over into the build tree.
# govendor is symlinked because that would mostly just be annoying to copy.

# Life is fun.

symlink("vendor_symlink") {
  name = "$go_target_dir/vendor"
  value = rebase_path("//vendor")
}

substitute_file("host_paths") {
  source = "internal/paths/host_paths.template.go"
  output = "$go_target_dir/internal/paths/host_paths.go"

  vars = substitute_config_vars + [
    ["PRODUCT_NAME", product_name]
  ]
}

substitute_file("nsbox_profile") {
  source = "//misc/profile.d-nsbox.sh"
  vars = substitute_config_vars
}

substitute_file("nsbox_policy") {
  source = "//misc/dev.nsbox.policy"
  vars = [
    ["NSBOX_INVOKER", "$prefix/$libexec_dir/$product_name/nsbox-invoker"],
  ]
}

copy("gofiles") {
  sources = [
    "go.mod",
    "go.sum",
    "cmd/nsbox/config.go",
    "cmd/nsbox/create.go",
    "cmd/nsbox/delete.go",
    "cmd/nsbox/info.go",
    "cmd/nsbox/kill.go",
    "cmd/nsbox/list.go",
    "cmd/nsbox/main.go",
    "cmd/nsbox/run.go",
    "cmd/nsbox/set_default.go",
    "cmd/nsboxd/main.go",
    "cmd/nsbox-invoker/main.go",
    "cmd/nsbox-host/enter.go",
    "cmd/nsbox-host/main.go",
    "cmd/nsbox-host/reload_exports.go",
    "cmd/nsbox-host/service.go",
    "cmd/nsbox-host/varlink_util.go",
    "internal/args/array.go",
    "internal/args/args.go",
    "internal/container/container.go",
    "internal/container/info.go",
    "internal/create/create.go",
    "internal/daemon/direct.go",
    "internal/daemon/transient.go",
    "internal/gtkicons/gtkicons.go",
    "internal/gtkicons/nsbox-gtkicons.c",
    "internal/gtkicons/nsbox-gtkicons.h",
    "internal/integration/xdgdesktop.go",
    "internal/image/image.go",
    "internal/inventory/inventory.go",
    "internal/kill/kill.go",
    "internal/log/log.go",
    "internal/nspawn/builder.go",
    "internal/paths/paths.go",
    "internal/ptyservice/client.go",
    "internal/ptyservice/service.go",
    "internal/session/enter.go",
    "internal/session/setup.go",
    "internal/userdata/check_privs.go",
    "internal/userdata/userdata.go",
    "internal/varlink/dev.nsbox.varlink",
    "internal/varlinkhost/varlinkhost.go",
    "internal/webutil/download.go",
    "internal/webutil/extract.go",
  ]

  outputs = ["$go_target_dir/{{source}}"]

  deps = [":vendor_symlink", ":host_paths"]
}

go_binary("varlink-go-interface-generator") {
  package = "github.com/varlink/go/cmd/varlink-go-interface-generator"
  deps = [":gofiles"]
}

action("nsbox-varlink-interface") {
  script = "//build/bin_proxy.py"
  sources = get_target_outputs(":varlink-go-interface-generator")
  sources += ["$go_target_dir/internal/varlink/dev.nsbox.varlink"]
  outputs = ["$go_target_dir/internal/varlink/devnsbox.go"]
  args = [rebase_path(go_target_dir, root_build_dir)] + rebase_path(sources, go_target_dir)
  deps = [":gofiles", ":varlink-go-interface-generator"]
}

go_deps = [":gofiles", ":nsbox-varlink-interface"]

go_binary(product_name) {
  package = "github.com/refi64/nsbox/cmd/nsbox"
  deps = [":gofiles", ":nsbox-varlink-interface"]
}

go_binary("nsboxd") {
  package = "github.com/refi64/nsbox/cmd/nsboxd"
  deps = go_deps
}

go_binary("nsbox-invoker") {
  package = "github.com/refi64/nsbox/cmd/nsbox-invoker"
  deps = go_deps
}

go_binary("nsbox-host") {
  package = "github.com/refi64/nsbox/cmd/nsbox-host"
  deps = go_deps
  static = true
}

python_binary("$product_name-bender") {
  source = "//utils/nsbox-bender.py"
  output = "$install_dir/$bin_dir/$target_name"
  python_files_dir = "$install_dir/$share_dir/$product_name/python"
}

copy("install-bin") {
  sources = get_target_outputs(":$product_name")
  outputs = ["$install_dir/$bin_dir/{{source_file_part}}"]
  deps = [":$product_name", ":$product_name-bender"]
}

if (!is_stable_build) {
  symlink("install-bin-edge-alias") {
    name = "$install_dir/$bin_dir/nsbox"
    value = "./nsbox-edge"
    deps = [":nsbox-edge"]
  }

  symlink("install-bin-edge-bender-alias") {
    name = "$install_dir/$bin_dir/nsbox-bender"
    value = "./nsbox-edge-bender"
    deps = [":nsbox-edge-bender"]
  }
}

copy("install-etc") {
  sources = get_target_outputs(":nsbox_profile")
  outputs = ["$install_dir/$config_dir/profile.d/$product_name.sh"]
  deps = [":nsbox_profile"]
}

copy("install-polkit-actions") {
  sources = get_target_outputs(":nsbox_policy")
  outputs = ["$install_dir/$share_dir/polkit-1/actions/dev.nsbox.policy"]
  deps = [":nsbox_policy"]
}

copy("install-polkit-rules") {
  sources = ["//misc/dev.nsbox.rules"]
  outputs = ["$install_dir/$share_dir/polkit-1/rules.d/dev.nsbox.rules"]
}

copy("install-private-exec") {
  deps = [":nsboxd", ":nsbox-invoker", ":nsbox-host"]
  sources = []
  foreach(dep, deps) {
    sources += get_target_outputs(dep)
  }
  outputs = ["$install_dir/$libexec_dir/$product_name/{{source_file_part}}"]
}

copy("install-share-data") {
  sources = [
    "data/getty-override.conf",
    "data/nsbox-container.target",
    "data/nsbox-init.service",
    "data/scripts/nsbox-apply-env.sh",
    "data/scripts/nsbox-enter-run.sh",
    "data/scripts/nsbox-enter-setup.sh",
    "data/scripts/nsbox-init.sh",
  ]
  outputs = ["$install_dir/$share_dir/$product_name/{{source}}"]
}

copy("install-share-images") {
  sources = [
    "images/arch/Dockerfile",
    "images/arch/metadata.json",
    "images/arch/playbook.yaml",
    "images/arch/roles/main/tasks/main.yaml",
    "images/fedora/metadata.json",
    "images/fedora/playbook.yaml",
    "images/fedora/roles/main/tasks/main.yaml",
    "images/fedora/roles/main/templates/nsbox.repo",
  ]
  outputs = ["$install_dir/$share_dir/$product_name/{{source}}"]
}

copy("install-share-release") {
  sources = get_target_outputs(":release_files")
  deps = [":release_files"]
  outputs = ["$install_dir/$share_dir/$product_name/release/{{source_file_part}}"]
}

group("nsbox-install-root") {
  deps = [
    ":install-bin",
    ":install-etc",
    ":install-polkit-actions",
    ":install-polkit-rules",
    ":install-private-exec",
    ":install-share-data",
    ":install-share-images",
    ":install-share-release",
  ]

  if (!is_stable_build) {
    deps += [
      ":install-bin-edge-alias",
      ":install-bin-edge-bender-alias",
    ]
  }
}

group("default") {
  deps = [":nsbox-install-root"]
}

if (fedora_package) {
  group("fedora") {
    deps = ["//packaging/fedora"]
  }
}

if (fedora_guest_tools) {
  group("fedora_guest_tools") {
    deps = ["//guest-tools/fedora"]
  }
}

group("images") {
  deps = ["//images"]
}
