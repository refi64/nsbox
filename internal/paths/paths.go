/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

package paths

// NOTE: several of the below variables are set in host_paths.go, which is generated by the
// build scripts (see BUILD.gn in the root directory).

import (
	"github.com/refi64/nsbox/internal/userdata"
	"os"
	"path/filepath"
	"strings"
)

const InContainerPrivPath = "/var/lib/.nsbox-priv"
const HostServiceSocketName = "host-service.sock"
const PtyServiceSocketName = "pty-service.sock"
const StorageRoot = State + "/nsbox"

func ContainerDefault(usrdata *userdata.Userdata) string {
	return filepath.Join(StorageRoot, usrdata.User.Username, "default")
}

func ContainerInventory(usrdata *userdata.Userdata) string {
	return filepath.Join(StorageRoot, usrdata.User.Username, "inventory")
}

func ContainerData(usrdata *userdata.Userdata, name string) string {
	return filepath.Join(ContainerInventory(usrdata), name)
}

func GetExecutablePath() (self string, err error) {
	self, err = os.Executable()
	if err != nil {
		return
	}

	self, err = filepath.EvalSymlinks(self)
	if err != nil {
		return
	}

	self, err = filepath.Abs(self)
	return
}

func GetPathRelativeToInstallRoot(subpaths ...string) (string, error) {
	self, err := GetExecutablePath()
	if err != nil {
		return "", err
	}

	parts := []string{filepath.Dir(self), ".."}

	// XXX: this is kinda hacked in.
	if strings.HasSuffix(self, "nsboxd") || strings.HasSuffix(self, "nsbox-invoker") {
		// nsboxd is in ROOT/libexec/nsbox, so a level further down than the nsbox CLI.
		parts = append(parts, "..")
	}

	parts = append(parts, subpaths...)

	path := filepath.Clean(filepath.Join(parts...))
	if _, err := os.Stat(path); err != nil {
		return "", err
	}

	return path, nil
}
