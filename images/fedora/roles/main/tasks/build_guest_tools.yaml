- include_vars:
    file: guest_tools.yaml
    name: guest_tools

- name: Remove the deprecated guest tools repository
  file:
    path: /etc/yum.repos.d/nsbox-edge.repo
    state: absent

- name: Check for guest tools build requirements
  shell: "rpm -q {{ guest_tools.build_requires | join(' ') }}"
  ignore_errors: true
  register: build_requires_test
  args:
    warn: false

- name: Install guest tools build requirements (this may take a while)
  when: build_requires_test.rc != 0
  dnf:
    name: '{{ guest_tools.build_requires }}'
    update_cache: true

- name: Check the available guest tools version
  shell: "rpm -q --queryformat '%{VERSION}' nsbox-guest-tools"
  ignore_errors: true
  register: guest_tools_test
  args:
    warn: false

- when: >-
    guest_tools_test.rc != 0
    or (guest_tools_test.stdout_lines | first) is version(guest_tools.min_version, '<')
  block:
    - name: Create a temporary build directory
      tempfile:
        state: directory
        prefix: nsbox
      register: rpm_topdir

    - set_fact:
        gpg_home: '{{ rpm_topdir.path }}/gpg'
        gpg_keygen: '{{ rpm_topdir.path }}/keygen'
        gpg_pubkey: '{{ rpm_topdir.path }}/pub.asc'

    - name: Create a GPG home directory
      file:
        path: '{{ gpg_home }}'
        state: directory
        mode: '0700'

    - name: Create the gpg script
      copy:
        dest: '{{ gpg_keygen }}'
        content: |
          Key-Type: 1
          Key-Length: 2048
          Name-Real: {{ guest_tools.gpg_name }}
          Name-Comment: Auto-generated by the image playbook
          Name-Email: {{ guest_tools.gpg_email }}
          Expire-Date: 0
          %no-protection
          %commit

    - name: Generate the gpg key
      shell: gpg --homedir {{ gpg_home }} --batch --generate-key {{ gpg_keygen }}

    - name: Export the gpg public key
      shell: >
        gpg
        --homedir {{ gpg_home }}
        --armor
        --output {{ gpg_pubkey }}
        --export '{{ guest_tools.gpg_email }}'

    - name: Copy the files for the guest tools
      copy:
        src: '{{ item }}'
        # Trailing / will create the intermediate directories as needed.
        dest: '{{ rpm_topdir.path }}/SOURCES/'
      loop:
        # XXX: Copying everything to SOURCES is a bit ugly, but it works...
        - nsbox-guest-tools.spec
        - nsbox_trigger.py

    - name: Build the guest tools
      shell: >-
        rpmbuild
        --define {{ ('nsbox_version ' + nsbox_version) | quote }}
        --define {{ ('_topdir ' + rpm_topdir.path) | quote }}
        -bb nsbox-guest-tools.spec
      args:
        chdir: '{{ rpm_topdir.path }}/SOURCES'

    - name: Locate the guest tools
      find:
        paths: '{{ rpm_topdir.path }}/RPMS/noarch'
        patterns: 'nsbox-guest-tools*.rpm'
      register: guest_tools_rpm

    - name: Sign the guest tools
      shell: >-
        rpm
        --define '_signature gpg'
        --define {{ ('_gpg_path ' + gpg_home) | quote }}
        --define {{ ('_gpg_name ' + guest_tools.gpg_name) | quote }}
        --addsign {{ (guest_tools_rpm.files | first).path }}

    - name: Install the gpg key
      rpm_key:
        state: present
        key: '{{ gpg_pubkey }}'

    - name: Install the guest tools (this may take a while)
      dnf:
        name: '{{ (guest_tools_rpm.files | first).path }}'
        state: present
        update_cache: true

  always:
    - rpm_key:
        state: absent
        key: '{{ gpg_pubkey }}'
      ignore_errors: true

    - file:
        state: absent
        path: '{{ rpm_topdir.path }}'
      when: rpm_topdir is defined
