# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

if (target_os == "") {
  target_os = host_os
}

if (target_cpu == "") {
  target_cpu = host_cpu
}

if (current_cpu == "") {
  current_cpu = target_cpu
}

if (current_os == "") {
  current_os = target_os
}

declare_args() {
  # Mark this as a stable build.
  is_stable_build = false

  # The path to the Go binary.
  go_exe = "go"

  # The system's root installation prefix.
  prefix = "/usr"

  # The system's bin directory, relative to the system's prefix.
  bin_dir = "bin"

  # The system's libexec directory, relative to the system's prefix.
  libexec_dir = "libexec"

  # The system's data directory, relative to the system's prefix.
  share_dir = "share"

  # The system's shared state directory, which should be an absolute path.
  state_dir = "/var/lib"

  # The system's config directory, which should be an absolute path.
  config_dir = "/etc"

  # The image builder to use for nsbox-bender (either "buildah" or "docker").
  image_builder = "buildah"

  # Build the Fedora package.
  fedora_package = false

  # Enable SELinux support.
  enable_selinux = false

  # Path to the SELinux make executable.
  selinux_make = "make"

  # Path to the SELinux build makefile.
  selinux_makefile = "/usr/share/selinux/devel/Makefile"

  # The path to the rpmbuild executable.
  rpmbuild_exe = "rpmbuild"

  # The Fedora release to build RPMs for.
  fedora_rpm_target_release = "33"

  # The path to the makepkg executable.
  makepkg_exe = "makepkg"

  # Override the release number for build purposes.
  override_release_version = ""
}

assert(image_builder == "buildah" || image_builder == "docker",
       "image_builder must be buildah or docker, not $image_builder")

# We're not building any C/C++ code, so the toolchain only needs to define a few tools.
set_default_toolchain("//build/minimal-toolchain")

# Define some common substitution vars that build files will use.
substitute_config_vars = [
  ["BIN_DIR", bin_dir],
  ["CONFIG_DIR", config_dir],
  ["LIBEXEC_DIR", libexec_dir],
  ["SHARE_DIR", share_dir],
  ["STATE_DIR", state_dir],
]

if (is_stable_build) {
  release_branch = "stable"
  product_name = "nsbox"
  rdns_name = "dev.nsbox"
} else {
  release_branch = "edge"
  product_name = "nsbox-edge"
  rdns_name = "dev.nsbox.edge"
}

if (override_release_version != "") {
  release_version = override_release_version
} else {
  version_data = exec_script("//build/parse_release.py",
                             ["--root", rebase_path("//"),  "--branch", release_branch],
                             "json", ["//.git/logs/HEAD"])
  release_version = version_data.version
  release_commit = version_data.commit

  if (release_branch == "edge") {
    assert(release_commit != "")
  }
}

selinux_variant = "targeted"
